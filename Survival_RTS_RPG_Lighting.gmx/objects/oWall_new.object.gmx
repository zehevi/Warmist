<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oLight_polygon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>light_touching[0] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///build the wall shape
//find shape width and height
var u,v,pl,pr,pt,pb;

pright = 0;
pleft = 0;
ptop = 0;
pbottom = 0;

for(var i=1; i&lt;pointNum; i++){
    if(point[i,0]&gt;point[pright,0]) pright = i;
    if(point[i,0]&lt;point[pleft,0]) pleft = i;
    if(point[i,1]&gt;point[pbottom,1]) pbottom = i;
    if(point[i,1]&lt;point[ptop,1]) ptop = i;
}
pl = point[pleft,0];
pr = point[pright,0];
pt = point[ptop,1];
pb = point[pbottom,1];

//Texture U/V
u = 1/(pr-pl);
v = 1/(pb-pt);

//create a surface to draw to
var surf = surface_create(pr-pl, pb-pt);

surface_set_target(surf);
draw_clear_alpha(0,0);
draw_set_colour(c_white);
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        for(var i=0; i&lt;pointNum; i++)
        {
            tx = u*(point[i,0]-pl);
            ty = v*(point[i,1]-pt);
            draw_vertex_texture(point[i,0]-pl,point[i,1]-pt,tx,ty);
        }
    draw_primitive_end();
draw_set_colour(0);
surface_reset_target();

//sprite_index = sprite_create_from_surface(surf,0,0,pr-pl,pb-pt,0,0,0,0);
sprite_index = sprite_create_from_surface(surf,pl,pt,pr,pb,0,0,0,0);
x = 0;//(pr-pl)*.5;
y = 0;//(pb-pt)*.5;

surface_free(surf);

//Assign bbox locations for collision checking
pleft = pl;
pright = pr;
ptop = pt;
pbottom = pb;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the wall model
/*draw_set_color(image_blend);
draw_set_alpha(image_alpha);
d3d_transform_set_identity();
    d3d_transform_add_rotation_z(image_angle);
    d3d_transform_add_translation(x,y,0);
    d3d_model_draw(model,0,0,0,tex);
d3d_transform_set_identity();
draw_set_color(0);
draw_set_alpha(1);*/

draw_self();
///draw_surface(surf,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
