<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSoldier</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oLight_emitter</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats
mouse_dir = 0;
mouse_dirTo = mouse_dir;
xspd = 0;
yspd = 0;
spd = 1.2;
spdAcc = 0.8;

shootable = 0;
shotAcc = 5;
shotRate = room_speed/10; //shots per second
shotDelay = 0;
//weaponTipOff = 34;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
image_xscale=.5;
image_yscale=.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Light init
light_color = merge_colour(merge_colour(c_aqua,c_gray,.5),c_black,.1);
//light_alpha = .2;
light_sprite = sFlashlight;
light_radius = sprite_get_width(light_sprite);
light_direction = 0;
light_isOn = 1;
light_xoff = 0;//16;

sprite_overlay = -1;//sChar_overlay;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle systems
shootable = 1;

globalvar Sname,particle1,emitter1;

///bullet particle system
Sname = part_system_create();
particle1 = part_type_create();
part_type_shape(particle1,pt_shape_pixel);
part_type_size(particle1,1,2,0,0);
part_type_scale(particle1,1,1);
part_type_alpha1(particle1,1);
part_type_speed(particle1,0.30,1,0,0);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,0,0,1);
part_type_blend(particle1,0);
part_type_life(particle1,10,20);
emitter1 = part_emitter_create(Sname);

scr_part_gunSmoke();
scr_part_explosion();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision
CollisionPriority = ds_priority_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shootable
if(!shootable)
{
    shotDelay -= delta;
}

if(!shotDelay)
{
    shootable = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aiming
switch(control_device)
{
case KEYBOARD:
    var xx,yy,cx,cy;
    xx = window_mouse_get_x();
    yy = window_mouse_get_y();
    cx = window_get_width()/2;
    cy = window_get_height()/2;
    
    if(point_distance(cx,cy,xx,yy)&gt;7){
        mouse_dirTo += angle_difference(point_direction(cx,cy,xx,yy),mouse_dirTo)*(point_distance(cx,cy,xx,yy)*0.00015);
    }
    window_mouse_set(xx+(cx-xx)*0.1, yy+(cy-yy)*0.1);
    mouse_dir += angle_difference(mouse_dirTo,mouse_dir)*.15;
    break;
    
case XBOX360:
    xx = gamepad_axis_value(gamepad_num, gp_axisrh);
    yy = gamepad_axis_value(gamepad_num, gp_axisrv);
    if(abs(xx)||abs(yy)) mouse_dirTo = point_direction(0, 0, xx, yy);
    mouse_dir += angle_difference(mouse_dirTo,mouse_dir)*.075;
    break;

case ONSCREEN:
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement

switch(control_device)
{
case KEYBOARD:
    hspeed = (keyboard_check(ord('D'))-keyboard_check(ord('A')))*spd*delta;
    vspeed = (keyboard_check(ord('S'))-keyboard_check(ord('W')))*spd*delta;
    break;
    
case XBOX360:
    hspeed = gamepad_axis_value(gamepad_num, gp_axislh)*spd*delta;
    vspeed = gamepad_axis_value(gamepad_num, gp_axislv)*spd*delta;
    break;

case ONSCREEN:
    
    break;
}

image_angle = mouse_dir;//point_direction(x,y,mouse_x,mouse_y);
light_direction = image_angle;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with walls (OLD)
/*
with(oWall) if( rectangle_in_rectangle(pleft,ptop,pright,pbottom,view_xview,view_yview,view_xview+view_wview,view_yview+view_hview) )
{
    for(i=pointNum-1;i&gt;1;i--)
    {
        if(collision_line(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.id,1,1)&gt;=0)
        {
            maxDist = point_line_distance(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.x,other.y);
            pdir = point_direction(global._tx,global._ty,other.x,other.y);
            xoff = lengthdir_x(1,pdir);
            yoff = lengthdir_y(1,pdir);
            while(collision_line(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.id,1,1)&gt;=0)
            {
                other.x+=xoff;
                other.y+=yoff;
            }
        }
    }
    if(collision_line(point[0,0],point[0,1],point[1,0],point[1,1],other.id,1,1)&gt;=0)
    {
        maxDist = point_line_distance(point[0,0],point[0,1],point[1,0],point[1,1],other.x,other.y);
        pdir = point_direction(global._tx,global._ty,other.x,other.y);
        xoff = lengthdir_x(1,pdir);
        yoff = lengthdir_y(1,pdir);
        while(collision_line(point[0,0],point[0,1],point[1,0],point[1,1],other.id,1,1)&gt;=0)
        {
            other.x+=xoff;
            other.y+=yoff;
        }
    }
    else if(collision_line(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.id,1,1)&gt;=0)
    {
        maxDist = point_line_distance(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.x,other.y);
        pdir = point_direction(global._tx,global._ty,other.x,other.y);
        xoff = lengthdir_x(1,pdir);
        yoff = lengthdir_y(1,pdir);
        while(collision_line(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.id,1,1)&gt;=0)
        {
            other.x+=xoff;
            other.y+=yoff;
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gamepad shoot
if(control_device==XBOX360)
{
    if(shootable &amp;&amp; gamepad_button_check(0,gp_shoulderrb))
    {
        var len,dir,xx,yy,t,priox,prioy,obj=noone;
        len = 300;
        dir = image_angle-shotAcc+random(shotAcc*2);//point_direction(x,y,mouse_x,mouse_y);
        xx = x+lengthdir_x(len,dir);
        yy = y+lengthdir_y(len,dir);
        priox = ds_priority_create();
        prioy = ds_priority_create();
        
        with(oWall)
        {
            for(i=pointNum-1;i&gt;1;i--)
            {
                {
                    t = lines_intersect(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.x,other.y,xx,yy);
                    if(t&gt;0 &amp;&amp; t&lt;=1)
                    {
                        xx = point[i,0]+t*(point[i-2,0]-point[i,0]);
                        yy = point[i,1]+t*(point[i-2,1]-point[i,1]);
                        d = point_distance(other.x,other.y,xx,yy);
                        ds_priority_add(priox,xx,d);
                        ds_priority_add(prioy,yy,d);
                    }
                }
            }
            t = lines_intersect(point[0,0],point[0,1],point[1,0],point[1,1],other.x,other.y,xx,yy);
            if(t&gt;0 &amp;&amp; t&lt;=1)
            {
                xx = point[0,0]+t*(point[1,0]-point[0,0]);
                yy = point[0,1]+t*(point[1,1]-point[0,1]);
                d = point_distance(other.x,other.y,xx,yy);
                ds_priority_add(priox,xx,d);
                ds_priority_add(prioy,yy,d);
            }
            t = lines_intersect(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.x,other.y,xx,yy);
            if(t&gt;0 &amp;&amp; t&lt;=1)
            {
                xx = point[pointNum-2,0]+t*(point[pointNum-1,0]-point[pointNum-2,0]);
                yy = point[pointNum-2,1]+t*(point[pointNum-1,1]-point[pointNum-2,1]);
                d = point_distance(other.x,other.y,xx,yy);
                ds_priority_add(priox,xx,d);
                ds_priority_add(prioy,yy,d);
            }
        }
        //find collision with oSolid
        xx = ds_priority_find_min(priox);
        yy = ds_priority_find_min(prioy);
        var dis = point_distance(x,y,xx,yy)
        len = dis;
        obj = collision_line(x,y,x+lengthdir_x(len,dir),y+lengthdir_y(len,dir),oSolid,1,1);
        if(obj&gt;=0)
        {
            bx = x;
            by = y;
            do{
                if(collision_line(bx,by,bx+lengthdir_x(len,dir),by+lengthdir_y(len,dir),oSolid,1,1)!=noone)
                {
                    len *=.5;
                }
                else
                {
                    bx += lengthdir_x(len,dir);
                    by += lengthdir_y(len,dir);
                }
            }
            until(len &lt;= 3 || len==dis);
            xx = bx;
            yy = by;
        }
        
        with(instance_create(x,y,oMuzzle)){
            light_direction = other.mouse_dir;
        }
        audio_play_sound(snd_gun,10,0);
        shootable = false;
        shotDelay = shotRate;
        
        if(xx||yy)
        {
            part_type_color1(particle1,merge_colour(c_gray,c_black,random(.5)));
            part_type_direction(particle1,image_angle-45+180,image_angle+45+180,0,0);
            part_emitter_region(Sname,emitter1,xx,xx,yy,yy,ps_shape_ellipse,1);
            part_emitter_burst(Sname,emitter1,particle1,3);
            instance_create(xx,yy,oHit);
            if(obj&gt;=0) obj.hp -= 2;
        }
        ds_priority_destroy(priox);
        ds_priority_destroy(prioy);
        //smoke
        part_emitter_region(Sname,emit_gunSmoke,x,x,y,y,0,0);
        part_type_direction(part_gunSmoke1,image_angle-5,image_angle+10,0,5);
        part_emitter_burst(Sname,emit_gunSmoke,part_gunSmoke1,2);
        //vibrate
        //gamepad_set_vibration(gamepad_num,0.2,0.2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view fix
view_xview += ( x+lengthdir_x(30,image_angle) - (view_xview+view_wview/2) )/10*delta;
view_yview += ( y+lengthdir_y(30,image_angle) - (view_yview+view_hview/2) )/10*delta;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xoff,yoff;
xoff = lengthdir_x(1,point_direction(x,y,other.x,other.y));
yoff = lengthdir_y(1,point_direction(x,y,other.x,other.y));

while(position_meeting(x,y,other))
{
    x -= xoff;
    y -= yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with walls
with(other)
{
    for(i=pointNum-1;i&gt;1;i--)
    {
        if(collision_line(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.id,1,1)&gt;=0)
        {
            maxDist = point_line_distance(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.x,other.y);
            pdir = point_direction(global._tx,global._ty,other.x,other.y);
            xoff = lengthdir_x(1,pdir);
            yoff = lengthdir_y(1,pdir);
            while(collision_line(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.id,1,1)&gt;=0)
            {
                other.x+=xoff;
                other.y+=yoff;
            }
        }
    }
    if(collision_line(point[0,0],point[0,1],point[1,0],point[1,1],other.id,1,1)&gt;=0)
    {
        maxDist = point_line_distance(point[0,0],point[0,1],point[1,0],point[1,1],other.x,other.y);
        pdir = point_direction(global._tx,global._ty,other.x,other.y);
        xoff = lengthdir_x(1,pdir);
        yoff = lengthdir_y(1,pdir);
        while(collision_line(point[0,0],point[0,1],point[1,0],point[1,1],other.id,1,1)&gt;=0)
        {
            other.x+=xoff;
            other.y+=yoff;
        }
    }
    else if(collision_line(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.id,1,1)&gt;=0)
    {
        maxDist = point_line_distance(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.x,other.y);
        pdir = point_direction(global._tx,global._ty,other.x,other.y);
        xoff = lengthdir_x(1,pdir);
        yoff = lengthdir_y(1,pdir);
        while(collision_line(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.id,1,1)&gt;=0)
        {
            other.x+=xoff;
            other.y+=yoff;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(shootable)
{
    len = 300;
    dir = image_angle-5+random(10);//point_direction(x,y,mouse_x,mouse_y);
    bx = x;
    by = y;

    do{
        if(collision_line(bx,by,bx+lengthdir_x(len,dir),by+lengthdir_y(len,dir),oLight_polygon,1,1)!=noone)
        {
            len *=.5;
        }
        else
        {
            bx += lengthdir_x(len,dir);
            by += lengthdir_y(len,dir);
            if(len==300) break;
        }
    }
    until(len &lt;= 3);
    
    instance_create(bx,by,oHit);
    instance_create(x,y,oMuzzle);
    
    part_type_color1(particle1,c_green);
    part_type_direction(particle1,image_angle-45+180,image_angle+45+180,0,0);
    part_emitter_region(Sname,emitter1,bx,bx,by,by,ps_shape_ellipse,1);
    part_emitter_burst(Sname,emitter1,particle1,3);
    
    audio_play_sound(snd_gun,10,0);
    
    shootable = false;
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse shoot
if(shootable)
{
    var len,dir,xx,yy,t,priox,prioy,obj=noone;
    len = 300;
    dir = image_angle-shotAcc+random(shotAcc*2);//point_direction(x,y,mouse_x,mouse_y);
    xx = x+lengthdir_x(len,dir);
    yy = y+lengthdir_y(len,dir);
    priox = ds_priority_create();
    prioy = ds_priority_create();
    
    with(oWall)
    {
        for(i=pointNum-1;i&gt;1;i--)
        {
            {
                t = lines_intersect(point[i,0],point[i,1],point[i-2,0],point[i-2,1],other.x,other.y,xx,yy);
                if(t&gt;0 &amp;&amp; t&lt;=1)
                {
                    xx = point[i,0]+t*(point[i-2,0]-point[i,0]);
                    yy = point[i,1]+t*(point[i-2,1]-point[i,1]);
                    d = point_distance(other.x,other.y,xx,yy);
                    ds_priority_add(priox,xx,d);
                    ds_priority_add(prioy,yy,d);
                }
            }
        }
        t = lines_intersect(point[0,0],point[0,1],point[1,0],point[1,1],other.x,other.y,xx,yy);
        if(t&gt;0 &amp;&amp; t&lt;=1)
        {
            xx = point[0,0]+t*(point[1,0]-point[0,0]);
            yy = point[0,1]+t*(point[1,1]-point[0,1]);
            d = point_distance(other.x,other.y,xx,yy);
            ds_priority_add(priox,xx,d);
            ds_priority_add(prioy,yy,d);
        }
        t = lines_intersect(point[pointNum-2,0],point[pointNum-2,1],point[pointNum-1,0],point[pointNum-1,1],other.x,other.y,xx,yy);
        if(t&gt;0 &amp;&amp; t&lt;=1)
        {
            xx = point[pointNum-2,0]+t*(point[pointNum-1,0]-point[pointNum-2,0]);
            yy = point[pointNum-2,1]+t*(point[pointNum-1,1]-point[pointNum-2,1]);
            d = point_distance(other.x,other.y,xx,yy);
            ds_priority_add(priox,xx,d);
            ds_priority_add(prioy,yy,d);
        }
    }
    //find collision with oSolid
    xx = ds_priority_find_min(priox);
    yy = ds_priority_find_min(prioy);
    var dis = point_distance(x,y,xx,yy)
    len = dis;
    obj = collision_line_first(x,y,x+lengthdir_x(len,dir),y+lengthdir_y(len,dir),oSolid,1,1);
    if(obj&gt;=0)
    {
        xx = obj.x;
        yy = obj.y;
    }
    /*obj = collision_line(x,y,x+lengthdir_x(len,dir),y+lengthdir_y(len,dir),oSolid,1,1);
    if(obj&gt;0)
    {
        bx = x;
        by = y;
        do{
            if(collision_line(bx,by,bx+lengthdir_x(len,dir),by+lengthdir_y(len,dir),oSolid,1,1) &gt;= 0)
            {
                len *=.5;
            }
            else
            {
                bx += lengthdir_x(len,dir);
                by += lengthdir_y(len,dir);
            }
        }
        until(len &lt;= 4 || len==dis);
        xx = bx;
        yy = by;
    }
    */
    with(instance_create(x,y,oMuzzle)){
        light_direction = other.mouse_dir;
    }
    audio_play_sound(snd_gun,10,0);
    shootable = false;
    shotDelay = shotRate;
    
    if(xx||yy)
    {
        part_type_color1(particle1,merge_colour(c_gray,c_black,random(.5)));
        part_type_direction(particle1,image_angle-45+180,image_angle+45+180,0,0);
        part_emitter_region(Sname,emitter1,xx,xx,yy,yy,ps_shape_ellipse,1);
        part_emitter_burst(Sname,emitter1,particle1,3);
        instance_create(xx,yy,oHit);
        if(obj&gt;=0) obj.hp -= 2;
    }
    ds_priority_destroy(priox);
    ds_priority_destroy(prioy);
    //smoke
    part_emitter_region(Sname,emit_gunSmoke,x,x,y,y,0,0);
    part_type_direction(part_gunSmoke1,image_angle-5,image_angle+10,0,5);
    part_emitter_burst(Sname,emit_gunSmoke,part_gunSmoke1,2);
    
    /*with(instance_create(x,y,oSmoke))
    {
        direction = dir-45+random(90);
        speed = 1+random(1);
    }*/
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),image_xscale,image_yscale,image_angle,image_blend,image_alpha);

draw_set_color(c_white); draw_set_alpha(0.2);
draw_circle(x+lengthdir_x(70,mouse_dirTo),y+lengthdir_y(70,mouse_dirTo),5,0);
//var a = abs(angle_diff(mouse_dirTo,mouse_dir)*(1/20));
draw_set_alpha(1-abs(angle_difference(mouse_dirTo,mouse_dir)*(1/20)));
draw_circle(x+lengthdir_x(70,mouse_dir),y+lengthdir_y(70,mouse_dir),2,0);
draw_set_color(c_black); draw_set_alpha(1); draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>light_isOn = !light_isOn;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
