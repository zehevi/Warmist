<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///release mode
//gml_release_mode(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Application surface fix
/*
view_wport = display_get_width();
view_hport = display_get_height();

view_wview = 256;
view_hview = round(view_wview*view_hport/view_wport);

window_set_size(view_wport,view_hport);
window_set_position(0,0);

application_surface_draw_enable(0);
surface_resize(application_surface,view_wview,view_hview);
display_set_gui_size(view_wport,view_hport);
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting
globalvar surfOut,surfLightA,surfLightB,surfBlurA,surfBlurB,light_intensity,light_ambient,light_vFormat,light_vBuff,LightObjList;

surfLightA = surface_create(view_wview,view_hview);
surfLightB = surface_create(view_wview,view_hview);
surfBlurA = surface_create(view_wview/4,view_hview/4);
surfBlurB = surface_create(view_wview/2,view_hview/2);

surfOut = surface_create(view_wview,view_hview);

/////Configurations////////////////////////////
light_intensity = 0.03; //this must set to 0 or the lowest intensity would be higher then 0
light_ambient = merge_colour(0,c_navy,light_intensity);
light_ct = 0;
light_t = 0.01; //lower = longer cycle
light_t_perstep = (2/360)*light_t; // pi/360 for full day/night cycle

/*vertex_format_begin();
vertex_format_add_position();
vertex_format_add_colour();
light_vFormat = vertex_format_end();

light_vBuff = vertex_create_buffer();

lightObjList = ds_list_create();*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init distortion engine
dg_init(10,10);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init smoke engine
//smoke_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deactivate irrelevant lights
instance_activate_all();
with(oLight_emitter)
{
    if(x != median(view_xview+light_radius, x, view_xview+view_wview-light_radius) &amp;&amp; y != median(view_yview-light_radius, y, view_yview+view_hview+light_radius))
    {
        instance_deactivate_object(self.id);
    }
}
with(oSolid)
{
    if(x != median(view_xview+sprite_width, x, view_xview+view_wview-sprite_width) &amp;&amp; y != median(view_yview-sprite_height, y, view_yview+view_hview+sprite_height))
    {
        instance_deactivate_object(self.id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Day/Night Cycle

light_ct = (light_ct+light_t) mod 360;
light_intensity += dsin((light_ct))*light_t_perstep;
light_ambient = merge_colour(0,c_navy,light_intensity);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Distortion update
dg_update();

/*if(mouse_check_button_pressed(mb_right)){
    dg_effect_explode(mouse_x,mouse_y,150,-10);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy surfaces
if(surface_exists(surfLightA)) surface_free(surfLightA);
if(surface_exists(surfLightB)) surface_free(surfLightB);
if(surface_exists(surfBlurA)) surface_free(surfBlurA);
if(surface_exists(surfBlurB)) surface_free(surfBlurB);
if(surface_exists(surfOut)) surface_free(surfOut);
//if(surface_exists(SmokeSurf)) surface_free(SmokeSurf);
//if(model != -1) d3d_model_destroy(model);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy light buffer
//vertex_delete_buffer(light_vBuff);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Surface recreate
if(!surface_exists(surfOut)) surfOut = surface_create(view_wview,view_hview);

if(!surface_exists(surfLightA)) surfLightA = surface_create(view_wview,view_hview);
if(!surface_exists(surfLightB)) surfLightB = surface_create(view_wview,view_hview);

if(!surface_exists(surfBlurA)) surfBlurA = surface_create(view_wview/2,view_hview/2);
if(!surface_exists(surfBlurB)) surfBlurB = surface_create(view_wview/1.5,view_hview/1.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI and controls
if(control_device==ONSCREEN)
{
    texture_set_interpolation(1);
    //surface_set_target(surfOut);
    surface_set_target(surfLightB);
    {
        //Touch controls
        //draw_set_blend_mode_ext(10, 1); //invert colours
        //draw_set_colour(c_white);
        draw_sprite_ext(sTouch_shoot,0,touch_shoot_xdraw,touch_shoot_ydraw,1,1,oPlayer.mouse_dirTo,c_white,0.3);
        
        draw_sprite_ext(sTouch_move,0,touch_move_xdraw,touch_move_ydraw,1,1,0,c_white,0.3);
        draw_sprite_ext(sTouch_move,1,touch_move_joyx,touch_move_joyy,1,1,0,c_white,0.3);
        //draw_sprite_inverted(sTouch_move,1,touch_move_xdraw,touch_move_ydraw);
        
        //draw_set_blend_mode(0);
        //draw_set_colour(0);
    }
    surface_reset_target();
    //surface_reset_target();
    texture_set_interpolation(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Distortion+Lighting+Smoke
var guiw = view_wport;
var guih = view_hport;
draw_surface_stretched(surfOut,0,0,guiw,guih);
texture_set_interpolation(1);

draw_surface_stretched_ext(surfLightA,0,0,guiw,guih,c_white,1-light_intensity);
/*draw_surface_stretched_ext(surfLightA,-4,-4,guiw,guih,c_white,(1-light_intensity)*.25);
draw_surface_stretched_ext(surfLightA,4,-4,guiw,guih,c_white,(1-light_intensity)*.25);
draw_surface_stretched_ext(surfLightA,4,4,guiw,guih,c_white,(1-light_intensity)*.25);
draw_surface_stretched_ext(surfLightA,-4,4,guiw,guih,c_white,(1-light_intensity)*.25);*/

draw_set_blend_mode(1);
draw_surface_stretched_ext(surfLightB,0,0,guiw,guih,c_white,1);
//draw_surface_stretched_ext(SmokeSurf,0,0,guiw,guih,c_white,image_alpha);
draw_set_blend_mode(0);

texture_set_interpolation(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oLight_controller</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///some info
//draw_set_color(0);
//draw_rectangle(0,0,196,48,0);

var a = application_get_position();
var ww,hh;
ww = a[2]-a[0];
hh = a[3]-a[1];

draw_set_color(c_white);
draw_text(4,5,"FPS: "+string(fps)+"("+string(fps_real)
    +")#Controller: "+string(gamepad_get_description(control_device))+"#Gamepad count: "+string(gamepad_is_connected(0))+"#"+string(gamepad_num)
    +"#Instance_number: "+string(instance_number(all))
    +"#surfOut: "+string(surface_get_width(surfOut))+","+string(surface_get_height(surfOut))
    +"#AppSurf size: "+string(surface_get_width(application_surface))+","+string(surface_get_height(application_surface))
    +"#AppSurf drawn size: "+string(ww)+","+string(hh)
    +"#light_intensity: "+string(light_intensity)+"; light_ct: "+string(light_ct)
    );
draw_set_color(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lights
var vx,vy;
vx = view_xview;
vy = view_yview;
texture_set_interpolation(1);
draw_set_alpha(1);
draw_set_color(0);

surface_set_target(surfLightB);
draw_clear_alpha(0,0);
surface_reset_target();

with(oLight_emitter)
{
    if(!light_isOn) continue;
    surface_set_target(surfLightA);
    draw_clear_alpha(0,0);
    draw_set_blend_mode(bm_add);
    //draw_clear_alpha(light_ambient,1);
    draw_sprite_ext(light_sprite,0,x-vx,y-vy,light_scale,light_scale,light_direction,light_color,light_alpha);
    draw_set_blend_mode(bm_subtract);
    with(oLight_polygon)
    {
        if(!rectangle_in_rectangle( bbox_left,bbox_top,bbox_right,bbox_bottom, view_xview,view_yview,view_xview+view_wview,view_yview+view_hview )) continue;
        var xx = other.x+lengthdir_x(other.light_xoff,other.light_direction);
        var yy = other.y+lengthdir_y(other.light_xoff,other.light_direction);
        if(distance_to_point(xx,yy)&lt;other.light_radius)
        {
            light_draw_shadows(xx,yy);
        }
    }
    surface_reset_target();
    surface_set_target(surfLightB);
    draw_set_blend_mode(bm_add);
    draw_surface(surfLightA,0,0);
    if(sprite_overlay&gt;=0) draw_sprite_ext(sprite_overlay,image_index,x-vx,y-vy,1,1,image_angle,c_white,1);
    surface_reset_target();
}

draw_set_blend_mode(bm_subtract);
surface_set_target(surfLightA);
    draw_clear_alpha(light_ambient,1-light_intensity);
    //draw_clear_alpha(0,1);
    draw_surface(surfLightB,0,0);
surface_reset_target();

draw_set_blend_mode(1);
surface_set_target(surfBlurA);
    draw_clear_alpha(0,1);
    draw_surface_stretched(surfLightB,0,0,surface_get_width(surfBlurA),surface_get_height(surfBlurA));
surface_reset_target();

//draw_set_blend_mode(0);
surface_set_target(surfBlurB);
    draw_clear_alpha(0,1);
    draw_surface_stretched(surfBlurA,0,0,surface_get_width(surfBlurB),surface_get_height(surfBlurB));
surface_reset_target();

surface_set_target(surfLightB);
    draw_clear_alpha(0,0);
    draw_surface_stretched(surfBlurB,0,0,surface_get_width(surfLightB),surface_get_height(surfLightB));
surface_reset_target();

draw_set_color(0);
draw_set_blend_mode(bm_normal);
texture_set_interpolation(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Distortion
texture_set_interpolation(1);

surface_set_target(surfOut);
    tex = surface_get_texture(application_surface);
    var n;
    //draw_clear_alpha(0,1);
    draw_set_color(c_white);
    
        for(var j=0;j&lt;dg_vCells-1;j++)
        {
            draw_primitive_begin_texture(pr_trianglestrip,tex);
            for(var i=0;i&lt;dg_hCells;i++)
            {
                n = dg_hCells*j+i;
                m = dg_hCells*(j+1)+i;
                draw_vertex_texture(dg_xOrigin[n]+dg_xOff[n],dg_yOrigin[n]+dg_yOff[n],dg_u[n],dg_v[n]);
                draw_vertex_texture(dg_xOrigin[m]+dg_xOff[m],dg_yOrigin[m]+dg_yOff[m],dg_u[m],dg_v[m]);
            }
            draw_primitive_end();
        }
    
    draw_set_color(0);
    
surface_reset_target();
texture_set_interpolation(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smoke
//smoke_draw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
